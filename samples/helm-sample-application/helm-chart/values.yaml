app-chart:
  # A cloud destination with basic authentication
  cloudDestination: myCloudDestination
  # A onpremise destination with basic authentication
  onPremiseDestination: myOnpremiseDestination
  # A onpremise destination with principal propagation
  principalPropagationDestination: myPrincipalPropagationDestination
  destinationBinding: operator-destination-service
  connectivityBinding: operator-connectivity-service
  xsuaaBinding: operator-xsuaa-service
  imagePullSecrets: 
  # A secret containing the credentials to access your docker registry
  - name: docker-registry-secret
approuter-chart:
  config:
  # An Identity Provider which is in your subaccount
    idp: default
    # The TENANT_HOST_PATTERN your approuter will use to point at the right subaccount
    pattern: (.*).e2e.ingress.cloud-sdk-js.sdktests.shoot.canary.k8s-hana.ondemand.com
  xsuaaBinding: operator-xsuaa-service
  # A secret containing the credentials to access your docker registry
  imagePullSecrets:
  - name: docker-registry-secret
expose:
  enabled: true
  # Your cluster enviroment (see README table for more information)
  environment: gardener
  ingress:
    # Your domain
    shortRoute: cloud-sdk-js.sdktests.shoot.canary.k8s-hana.ondemand.com
    # The route your approuter will use, with a wildcard to enable multi-tenancy
    exposedRoute: "*.e2e.ingress.cloud-sdk-js.sdktests.shoot.canary.k8s-hana.ondemand.com"
    # The route your connectivity proxy will use to create a tunnel to your cloud connector
    connectivityProxyRoute: connectivitytunnel.ingress.cloud-sdk-js.sdktests.shoot.canary.k8s-hana.ondemand.com
  api-rule:
    # The hostname for the exposed api-gateway (see README table for more information)
    host: e2e-app-<YOUR_SUBDOMAIN>